// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.batik.svggen;

import java.awt.Color;
import java.awt.Font;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Composite;
import java.awt.Stroke;
import java.awt.Paint;
import java.util.Locale;
import java.text.DecimalFormatSymbols;
import java.text.DecimalFormat;
import org.w3c.dom.Document;

public class SVGGeneratorContext implements ErrorConstants
{
    Document domFactory;
    ImageHandler imageHandler;
    GenericImageHandler genericImageHandler;
    ExtensionHandler extensionHandler;
    SVGIDGenerator idGenerator;
    StyleHandler styleHandler;
    String generatorComment;
    ErrorHandler errorHandler;
    boolean svgFont;
    GraphicContextDefaults gcDefaults;
    int precision;
    protected DecimalFormat decimalFormat;
    protected static DecimalFormatSymbols dsf;
    protected static DecimalFormat[] decimalFormats;
    
    protected SVGGeneratorContext(final Document domFactory) {
        this.svgFont = false;
        this.precision = 4;
        this.decimalFormat = SVGGeneratorContext.decimalFormats[this.precision];
        this.setDOMFactory(domFactory);
    }
    
    public static SVGGeneratorContext createDefault(final Document domFactory) {
        final SVGGeneratorContext ctx = new SVGGeneratorContext(domFactory);
        ctx.setIDGenerator(new SVGIDGenerator());
        ctx.setExtensionHandler(new DefaultExtensionHandler());
        ctx.setImageHandler(new ImageHandlerBase64Encoder());
        ctx.setStyleHandler(new DefaultStyleHandler());
        ctx.setComment("Generated by the Batik Graphics2D SVG Generator");
        ctx.setErrorHandler(new DefaultErrorHandler());
        return ctx;
    }
    
    public final GraphicContextDefaults getGraphicContextDefaults() {
        return this.gcDefaults;
    }
    
    public final void setGraphicContextDefaults(final GraphicContextDefaults gcDefaults) {
        this.gcDefaults = gcDefaults;
    }
    
    public final SVGIDGenerator getIDGenerator() {
        return this.idGenerator;
    }
    
    public final void setIDGenerator(final SVGIDGenerator idGenerator) {
        if (idGenerator == null) {
            throw new SVGGraphics2DRuntimeException("idGenerator should not be null");
        }
        this.idGenerator = idGenerator;
    }
    
    public final Document getDOMFactory() {
        return this.domFactory;
    }
    
    public final void setDOMFactory(final Document domFactory) {
        if (domFactory == null) {
            throw new SVGGraphics2DRuntimeException("domFactory should not be null");
        }
        this.domFactory = domFactory;
    }
    
    public final ExtensionHandler getExtensionHandler() {
        return this.extensionHandler;
    }
    
    public final void setExtensionHandler(final ExtensionHandler extensionHandler) {
        if (extensionHandler == null) {
            throw new SVGGraphics2DRuntimeException("extensionHandler should not be null");
        }
        this.extensionHandler = extensionHandler;
    }
    
    public final ImageHandler getImageHandler() {
        return this.imageHandler;
    }
    
    public final void setImageHandler(final ImageHandler imageHandler) {
        if (imageHandler == null) {
            throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
        }
        this.imageHandler = imageHandler;
        this.genericImageHandler = new SimpleImageHandler(imageHandler);
    }
    
    public final void setGenericImageHandler(final GenericImageHandler genericImageHandler) {
        if (genericImageHandler == null) {
            throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
        }
        this.imageHandler = null;
        this.genericImageHandler = genericImageHandler;
    }
    
    public final StyleHandler getStyleHandler() {
        return this.styleHandler;
    }
    
    public final void setStyleHandler(final StyleHandler styleHandler) {
        if (styleHandler == null) {
            throw new SVGGraphics2DRuntimeException("styleHandler should not be null");
        }
        this.styleHandler = styleHandler;
    }
    
    public final String getComment() {
        return this.generatorComment;
    }
    
    public final void setComment(final String generatorComment) {
        this.generatorComment = generatorComment;
    }
    
    public final ErrorHandler getErrorHandler() {
        return this.errorHandler;
    }
    
    public final void setErrorHandler(final ErrorHandler errorHandler) {
        if (errorHandler == null) {
            throw new SVGGraphics2DRuntimeException("errorHandler should not be null");
        }
        this.errorHandler = errorHandler;
    }
    
    public final boolean isEmbeddedFontsOn() {
        return this.svgFont;
    }
    
    public final void setEmbeddedFontsOn(final boolean svgFont) {
        this.svgFont = svgFont;
    }
    
    public final int getPrecision() {
        return this.precision;
    }
    
    public final void setPrecision(final int precision) {
        if (precision < 0) {
            this.precision = 0;
        }
        else if (precision > 12) {
            this.precision = 12;
        }
        else {
            this.precision = precision;
        }
        this.decimalFormat = SVGGeneratorContext.decimalFormats[this.precision];
    }
    
    public final String doubleString(final double value) {
        final double absvalue = Math.abs(value);
        if (absvalue >= 1.0E8 || (int)value == value) {
            return Integer.toString((int)value);
        }
        return this.decimalFormat.format(value);
    }
    
    static {
        SVGGeneratorContext.dsf = new DecimalFormatSymbols(Locale.US);
        (SVGGeneratorContext.decimalFormats = new DecimalFormat[13])[0] = new DecimalFormat("#", SVGGeneratorContext.dsf);
        String format = "#.";
        for (int i = 1; i < SVGGeneratorContext.decimalFormats.length; ++i) {
            format += "#";
            SVGGeneratorContext.decimalFormats[i] = new DecimalFormat(format, SVGGeneratorContext.dsf);
        }
    }
    
    public static class GraphicContextDefaults
    {
        protected Paint paint;
        protected Stroke stroke;
        protected Composite composite;
        protected Shape clip;
        protected RenderingHints hints;
        protected Font font;
        protected Color background;
        
        public void setStroke(final Stroke stroke) {
            this.stroke = stroke;
        }
        
        public Stroke getStroke() {
            return this.stroke;
        }
        
        public void setComposite(final Composite composite) {
            this.composite = composite;
        }
        
        public Composite getComposite() {
            return this.composite;
        }
        
        public void setClip(final Shape clip) {
            this.clip = clip;
        }
        
        public Shape getClip() {
            return this.clip;
        }
        
        public void setRenderingHints(final RenderingHints hints) {
            this.hints = hints;
        }
        
        public RenderingHints getRenderingHints() {
            return this.hints;
        }
        
        public void setFont(final Font font) {
            this.font = font;
        }
        
        public Font getFont() {
            return this.font;
        }
        
        public void setBackground(final Color background) {
            this.background = background;
        }
        
        public Color getBackground() {
            return this.background;
        }
        
        public void setPaint(final Paint paint) {
            this.paint = paint;
        }
        
        public Paint getPaint() {
            return this.paint;
        }
    }
}
